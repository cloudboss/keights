---
- name: set keights version
  ansible.builtin.set_fact:
    keights_version: '{{ item }}'
  with_file:
  - '{{ role_path }}/version'

- name: set kubernetes version
  ansible.builtin.set_fact:
    k8s_version: '{{ keights_system.k8s_version | default(keights_version.split("-")[0]) }}'

- name: set route reflector cluster id
  ansible.builtin.set_fact:
    rr_cluster_id: '{{ keights_system.network.rr_cluster_id | default("10.0.0.1") }}'
  when: "keights_system.network.plugin == 'calico'"

- name: assert that route reflector cluster id is an ipv4 address
  ansible.builtin.assert:
    that:
    - "'{{ rr_cluster_id }}' | regex_search('([0-9]{1,3}\\.){3}[0-9]{1,3}')"
    msg: '`keights_system.network.rr_cluster_id` must be an ipv4 address'
  when: "keights_system.network.plugin == 'calico'"

- name: set route reflector cluster id
  ansible.builtin.set_fact:
    rr_cluster_id: '{{ keights_system.network.rr_cluster_id | default("42") }}'
  when: "keights_system.network.plugin == 'kube-router'"

- name: assert that route reflector cluster id is an integer
  ansible.builtin.assert:
    that:
    - 'rr_cluster_id | int'
    msg: '`keights_system.network.rr_cluster_id` must be an integer'
  when: "keights_system.network.plugin == 'kube-router'"

- name: define ssm paths
  ansible.builtin.set_fact:
    ca_cert_ssm_path: '/{{ keights_system.cluster_name }}/cluster/ca.crt'
    client_cert_ssm_path: '/{{ keights_system.cluster_name }}/controller/apiserver-kubelet-client.crt'
    client_key_ssm_path: '/{{ keights_system.cluster_name }}/controller/apiserver-kubelet-client.key'

- name: ensure cache directory
  ansible.builtin.file:
    path: '{{ playbook_dir }}/.cache/keights-system'
    state: directory
  register: cache_dir

- name: retrieve kubernetes certificates from ssm parameter store
  ansible.builtin.set_fact:
    client_cert: '{{ lookup("aws_ssm", client_cert_ssm_path) }}'
    client_key: '{{ lookup("aws_ssm", client_key_ssm_path) }}'
    ca_cert: '{{ lookup("aws_ssm", ca_cert_ssm_path) }}'
  no_log: true

- name: assert that certificates are found
  ansible.builtin.assert:
    that:
    - "{{ item }} != ''"
  loop:
  - client_cert
  - client_key
  - ca_cert

- name: define kubeconfig
  ansible.builtin.set_fact:
    kubeconfig:
      apiVersion: v1
      kind: Config
      clusters:
      - cluster:
          certificate-authority-data: '{{ ca_cert | b64encode }}'
          server: https://{{ keights_system.cluster_apiserver }}
        name: cb
      contexts:
      - context:
          cluster: cb
          user: admin
        name: admin@cb
      current-context: admin@cb
      preferences: {}
      users:
      - name: admin
        user:
          client-certificate-data: '{{ client_cert | b64encode }}'
          client-key-data: '{{ client_key | b64encode }}'
  no_log: true

- name: write kubeconfig file
  ansible.builtin.copy:
    dest: '{{ cache_dir.path }}/kubeconfig'
    content: '{{ kubeconfig | to_nice_yaml }}'
    mode: 0600
  no_log: true
  changed_when: false

# In Ansible 2.9, calico CRDs cannot be in the same manifest file
# as the resources which are created from them, so they are created
# separately here. In older versions, it would apply what it could
# and then a retry would apply the remaining resources.
- name: expand calico crd manifest template
  ansible.builtin.template:
    src: templates/manifests/calico-crd.yml.j2
    dest: '{{ cache_dir.path }}/calico-crd.yml'
  when: 'keights_system.network.plugin == "calico"'

- name: apply calico crd manifest
  kubernetes.core.k8s:
    # kubeconfig is used instead of other authentication arguments,
    # to ensure an existing ~/.kube/config does not take precedence.
    kubeconfig: '{{ cache_dir.path }}/kubeconfig'
    src: '{{ cache_dir.path }}/calico-crd.yml'
  register: apply_calico_crd_manifest
  until: apply_calico_crd_manifest is succeeded
  retries: 6
  delay: 10
  when: 'keights_system.network.plugin == "calico"'

- name: expand k8s manifest templates
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  loop:
  - src: templates/manifests/{{ keights_system.network.plugin }}.yml.j2
    dest: '{{ cache_dir.path }}/{{ keights_system.network.plugin }}.yml'
  - src: templates/manifests/storage.yml.j2
    dest: '{{ cache_dir.path }}/storage.yml'
  - src: templates/manifests/kubernetes-dashboard.yml.j2
    dest: '{{ cache_dir.path }}/kubernetes-dashboard.yml'
  - src: templates/manifests/aws-rbac.yml.j2
    dest: '{{ cache_dir.path }}/aws-rbac.yml'
  register: k8s_manifests

- name: apply k8s manifests
  kubernetes.core.k8s:
    kubeconfig: '{{ cache_dir.path }}/kubeconfig'
    src: '{{ item.item.dest }}'
  loop: '{{ k8s_manifests.results }}'
  register: apply_k8s_manifests
  until: apply_k8s_manifests is succeeded
  retries: 12
  delay: 10

- name: wait for network to come up
  kubernetes.core.k8s_info:
    kubeconfig: '{{ cache_dir.path }}/kubeconfig'
    kind: Pod
    namespace: kube-system
    label_selectors:
    - k8s-app in (calico-node, calico-typha, calico-kube-controllers, kube-dns, kube-router)
  register: pods
  until: pods | json_query('resources[].status.containerStatuses[] | [?ready==`false`]') == []
  retries: 60
  delay: 10

- name: define cert-manager defaults
  ansible.builtin.set_fact:
    cert_manager_namespace_default: kube-system
    cert_manager_replicas_default: 2

- name: define cert-manager namespace
  ansible.builtin.set_fact:
    cert_manager_namespace: '{{ keights_system.cert_manager.namespace | default(cert_manager_namespace_default) }}'

- name: expand cert-manager manifest templates
  ansible.builtin.template:
    src: templates/manifests/{{ item }}.yml.j2
    dest: '{{ cache_dir.path }}/{{ item }}.yml'
  loop:
  - cert-manager-crd
  - cert-manager
  when: keights_system.cert_manager.enable | default(true)

- name: apply cert-manager manifests
  kubernetes.core.k8s:
    kubeconfig: '{{ cache_dir.path }}/kubeconfig'
    src: '{{ cache_dir.path }}/{{ item }}.yml'
  register: apply_manifest
  until: apply_manifest is succeeded
  retries: 12
  delay: 10
  loop:
  - cert-manager-crd
  - cert-manager
  when: keights_system.cert_manager.enable | default(true)

- name: define csi driver defaults
  ansible.builtin.set_fact:
    csi_driver_namespace_default: kube-system
    csi_driver_replicas_default: 2
    csi_driver_aws_ebs_csi_driver_affinity_default:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.kubernetes.io/control-plane
              operator: Exists

- name: define csi driver namespace
  ansible.builtin.set_fact:
    csi_driver_namespace: '{{ keights_system.csi_driver.namespace | default(csi_driver_namespace_default) }}'

- name: expand csi driver manifest templates
  ansible.builtin.template:
    src: templates/manifests/{{ item }}.yml.j2
    dest: '{{ cache_dir.path }}/{{ item }}.yml'
  loop:
  - external-snapshotter-crd
  - snapshot-controller
  - aws-ebs-csi-driver
  when: keights_system.csi_driver.enable | default(true)

- name: apply csi driver manifests
  kubernetes.core.k8s:
    kubeconfig: '{{ cache_dir.path }}/kubeconfig'
    src: '{{ cache_dir.path }}/{{ item }}.yml'
  register: apply_manifest
  until: apply_manifest is succeeded
  retries: 12
  delay: 10
  loop:
  - external-snapshotter-crd
  - snapshot-controller
  - aws-ebs-csi-driver
  when: keights_system.csi_driver.enable | default(true)

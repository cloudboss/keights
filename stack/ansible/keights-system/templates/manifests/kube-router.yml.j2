#jinja2: trim_blocks:False
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-router-cfg
  namespace: kube-system
  labels:
    tier: node
    k8s-app: kube-router
data:
  kubeconfig.template: |
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        server: __APISERVER__
      name: default
    contexts:
    - context:
        cluster: default
        namespace: default
        user: default
      name: default
    current-context: default
    users:
    - name: default
      user:
        tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
  cni-conf.json: |
    {
      "cniVersion": "0.3.1",
      "name": "kubernetes",
      "plugins": [
        {
          "type": "bridge",
          "bridge": "kube-bridge",
          "isDefaultGateway": true,
          "ipam": {
            "type": "host-local"
          }
        },
        {
          "type": "portmap",
          "capabilities": {
            "snat": true,
            "portMappings": true
          }
        }
      ]
    }

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: kube-router
    tier: node
  name: kube-router
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: kube-router
      tier: node
  template:
    metadata:
      labels:
        k8s-app: kube-router
        tier: node
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: kube-router
      containers:
      - name: kube-router
        image: {{ keights_system.network.kube_router_image | default('cloudnativelabs/kube-router:v1.3.0') }}
        imagePullPolicy: IfNotPresent
        args:
        - --run-router=true
        - --run-firewall=true
        - --run-service-proxy={{ keights_system.network.replace_kube_proxy | default(false) | to_json }}
        - --disable-source-dest-check=false
        - --bgp-graceful-restart=true
        - --kubeconfig=/kube-router/kubeconfig
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KUBE_ROUTER_CNI_CONF_FILE
          value: /etc/cni/net.d/10-kuberouter.conflist
        livenessProbe:
          httpGet:
            path: /healthz
            port: 20244
          initialDelaySeconds: 10
          periodSeconds: 3
        resources:
          requests:
            cpu: 250m
            memory: 250Mi
        securityContext:
          privileged: true
        volumeMounts:
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: cni-conf-dir
          mountPath: /etc/cni/net.d
        - name: xtables-lock
          mountPath: /run/xtables.lock
          readOnly: false
        - name: kube-router
          mountPath: /kube-router
      initContainers:
      - name: write-kubeconfig
        image: {{ keights_system.network.busybox_image | default('busybox:1.30.1') }}
        command:
        - /bin/sh
        - -xec
        - |
          apiserver=`cat /etc/kubernetes/apiserver`
          template=/etc/kube-router/kubeconfig.template
          sed "s|__APISERVER__|https://${apiserver}|g" ${template} > /kube-router/kubeconfig
        volumeMounts:
        - name: apiserver
          mountPath: /etc/kubernetes/apiserver
          readOnly: true
        - name: kube-router
          mountPath: /kube-router
        - name: kube-router-cfg
          mountPath: /etc/kube-router
      {% if keights_system.network.rr_node_label | default('') %}
      # Label a node so you can annotate a node...
      - name: annotate-node
        image: {{ keights_system.network.kubectl_image | default('bitnami/kubectl:1.18.8') }}
        imagePullPolicy: IfNotPresent
        env:
        - name: KUBECONFIG
          value: /kube-router/kubeconfig
        - name: RR_NODE_LABEL
          value: "{{ keights_system.network.rr_node_label }}"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        command:
        - /bin/sh
        - -xec
        - |
          found_label=`kubectl get no ${NODE_NAME} \
              -o go-template \
              --template="{% raw %}{{range \\$k, \\$_ := .metadata.labels}}{{if eq \\$k \"${RR_NODE_LABEL}\"}}{{\\$k}}{{end}}{{end}}{% endraw %}"`

          if [ -n "${found_label}" ]; then
              kubectl patch no ${NODE_NAME} \
                  --patch '{"metadata":{"annotations":{"kube-router.io/rr.server":"{{ rr_cluster_id }}"}}}'
          else
              kubectl patch no ${NODE_NAME} \
                  --patch '{"metadata":{"annotations":{"kube-router.io/rr.client":"{{ rr_cluster_id }}"}}}'
          fi
        volumeMounts:
        - name: kube-router
          mountPath: /kube-router
      {% endif %}
      - name: install-cni
        image: {{ keights_system.network.busybox_image | default('busybox:1.30.1') }}
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -xec
        - |
          for oldconf in /etc/cni/net.d/*.conf; do
              rm -f ${oldconf}
          done
          configmap=/etc/kube-router/cni-conf.json
          dest=/etc/cni/net.d/10-kuberouter.conflist
          tmp=.${dest}
          diff ${configmap} ${dest} >/dev/null 2>&1 || (
              cp ${configmap} ${tmp}
              mv ${tmp} ${dest}
          )
        volumeMounts:
        - name: cni-conf-dir
          mountPath: /etc/cni/net.d
        - name: kube-router-cfg
          mountPath: /etc/kube-router
      hostNetwork: true
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node.kubernetes.io/not-ready
        operator: Exists
      volumes:
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: cni-conf-dir
        hostPath:
          path: /etc/cni/net.d
      - name: kube-router-cfg
        configMap:
          name: kube-router-cfg
      - name: apiserver
        hostPath:
          path: /etc/kubernetes/apiserver
      - name: kube-router
        emptyDir:
          medium: Memory
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
  updateStrategy:
    type: RollingUpdate

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-router
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kube-router
  namespace: kube-system
rules:
  - apiGroups:
    - ""
    resources:
      - namespaces
      - pods
      - services
      - nodes
      - endpoints
    verbs:
      - list
      - get
      - watch
  - apiGroups:
    - ""
    resources:
      - nodes
    verbs:
      - patch
  - apiGroups:
    - "networking.k8s.io"
    resources:
      - networkpolicies
    verbs:
      - list
      - get
      - watch
  - apiGroups:
    - extensions
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kube-router
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-router
subjects:
- kind: ServiceAccount
  name: kube-router
  namespace: kube-system

#jinja2: trim_blocks:False
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-router-cfg
  namespace: kube-system
  labels:
    tier: node
    k8s-app: kube-router
data:
  cni-conf.json: |
    {
      "cniVersion":"0.3.1",
      "name":"kubernetes",
      "type":"bridge",
      "bridge":"kube-bridge",
      "isDefaultGateway":true,
      "ipam": {
        "type":"host-local"
      }
    }

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: kube-router
    tier: node
  name: kube-router
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: kube-router
      tier: node
  template:
    metadata:
      labels:
        k8s-app: kube-router
        tier: node
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: kube-router
      containers:
      - name: kube-router
        image: {{ keights_system.network.kube_router_image | default('cloudnativelabs/kube-router:v0.3.2') }}
        imagePullPolicy: IfNotPresent
        args:
        - --run-router=true
        - --run-firewall=true
        - --run-service-proxy=false
        - --disable-source-dest-check=false
        - --bgp-graceful-restart
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        livenessProbe:
          httpGet:
            path: /healthz
            port: 20244
          initialDelaySeconds: 10
          periodSeconds: 3
        resources:
          requests:
            cpu: 250m
            memory: 250Mi
        securityContext:
          privileged: true
        volumeMounts:
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: cni-conf-dir
          mountPath: /etc/cni/net.d
      initContainers:
      {% if keights_system.network.rr_node_label | default('') %}
      # Label a node so you can annotate a node...
      - name: annotate-node
        image: {{ keights_system.network.kubectl_image | default('k8s.gcr.io/hyperkube:{}'.format(k8s_version)) }}
        imagePullPolicy: IfNotPresent
        env:
        - name: RR_NODE_LABEL
          value: "{{ keights_system.network.rr_node_label }}"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        command:
        - /bin/sh
        - -xec
        - |
          found_label=`kubectl get no ${NODE_NAME} \
              -o go-template \
              --template="{% raw %}{{range \\$k, \\$_ := .metadata.labels}}{{if eq \\$k \"${RR_NODE_LABEL}\"}}{{\\$k}}{{end}}{{end}}{% endraw %}"`

          if [ -n "${found_label}" ]; then
              kubectl patch no ${NODE_NAME} \
                  --patch '{"metadata":{"annotations":{"kube-router.io/rr.server":"{{ rr_cluster_id }}"}}}'
          else
              kubectl patch no ${NODE_NAME} \
                  --patch '{"metadata":{"annotations":{"kube-router.io/rr.client":"{{ rr_cluster_id }}"}}}'
          fi
      {% endif %}
      - name: install-cni
        image: {{ keights_system.network.busybox_image | default('busybox:1.30.1') }}
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -xec
        - |
          dest=/etc/cni/net.d/10-kuberouter.conf
          tmp=.${dest}
          cp /etc/kube-router/cni-conf.json ${tmp}
          mv ${tmp} ${dest}
        volumeMounts:
        - mountPath: /etc/cni/net.d
          name: cni-conf-dir
        - mountPath: /etc/kube-router
          name: kube-router-cfg
      hostNetwork: true
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node.kubernetes.io/not-ready
        operator: Exists
      volumes:
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: cni-conf-dir
        hostPath:
          path: /etc/cni/net.d
      - name: kube-router-cfg
        configMap:
          name: kube-router-cfg
  updateStrategy:
    type: RollingUpdate

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-router
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kube-router
  namespace: kube-system
rules:
  - apiGroups:
    - ""
    resources:
      - namespaces
      - pods
      - services
      - nodes
      - endpoints
    verbs:
      - list
      - get
      - watch
  - apiGroups:
    - ""
    resources:
      - nodes
    verbs:
      - patch
  - apiGroups:
    - "networking.k8s.io"
    resources:
      - networkpolicies
    verbs:
      - list
      - get
      - watch
  - apiGroups:
    - extensions
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kube-router
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-router
subjects:
- kind: ServiceAccount
  name: kube-router
  namespace: kube-system

---
- name: set keights version
  set_fact:
    keights_version: '{{ item }}'
  with_file:
    - '{{ role_path }}/version'

- name: set default values
  set_fact:
    cluster_dns: '{{ keights_stack.masters.service_cidr.split(".")[:-1] | join(".") }}.10'
    k8s_version: '{{ keights_stack.k8s_version | default(keights_version.split("-")[0]) }}'
    default_image: 'debian-stretch-k8s-hvm-amd64-{{ keights_version }}'
    cache_dir: '{{ playbook_dir }}/.cache'

- name: ensure cache directory
  file:
    path: '{{ cache_dir }}'
    state: directory

- name: find ami
  ec2_ami_facts:
    owners: '{{ keights_stack.image_owner | default("256008164056") }}'
    filters:
      name: '{{ keights_stack.image | default(default_image) }}'
  register: ami
  when: keights_stack.lookup_image | default(lookup_image)

- name: assert that one ami is found
  assert:
    that: ami.images | length > 0
    msg: 'expected to find at least one ami with name {{ keights_stack.image | default(default_image) }}'
  when: keights_stack.lookup_image | default(lookup_image)

- name: assert the correct number of master subnet ids
  assert:
    that: keights_stack.masters.subnet_ids | length in (1, 3)
    msg: 'expected to be given 1 or 3 master subnet ids, got {{ keights_stack.masters.subnet_ids | length }}'

- name: set image id
  set_fact:
    image_id: '{{ ami.images[0].image_id }}'
  when: keights_stack.lookup_image | default(lookup_image)

- name: find lambda archives in s3
  aws_s3:
    bucket: '{{ keights_stack.resource_bucket | default(resource_bucket) }}'
    object: 'stackbot/{{ item }}/{{ keights_version }}/go1.x/{{ item }}-{{ keights_version }}.zip'
    mode: geturl
  register: stackbots
  loop:
    - kube_ca
    - subnet_to_az
  changed_when: false
  failed_when: false
  tags:
    - lambda

- name: download lambda archives releases
  get_url:
    url: https://github.com/cloudboss/keights/releases/download/{{ keights_version }}/{{ item.item }}-{{ keights_version }}.zip
    dest: '{{ cache_dir }}'
  loop: '{{ stackbots.results }}'
  when: '"url" not in item'
  tags:
    - lambda

- name: upload lambda archives to s3
  aws_s3:
    bucket: '{{ keights_stack.resource_bucket | default(resource_bucket) }}'
    object: 'stackbot/{{ item.item }}/{{ keights_version }}/go1.x/{{ item.item }}-{{ keights_version }}.zip'
    mode: put
    src: '{{ cache_dir }}/{{ item.item }}-{{ keights_version }}.zip'
  loop: '{{ stackbots.results }}'
  when: '"url" not in item'
  tags:
    - lambda

- name: build common stack
  cloudformation:
    stack_name: '{{ keights_stack.cluster_name }}-common'
    template: '{{ role_path }}/files/common.yml'
    template_parameters:
      VpcId: '{{ keights_stack.vpc_id }}'
      ClusterName: '{{ keights_stack.cluster_name }}'
      KmsKeyId: '{{ keights_stack.kms_key_id }}'
      ApiAccessCidr: '{{ keights_stack.api_access_cidr }}'
      # TODO: give masters and nodes separate ssh_access_cidr
      SshAccessCidr: '{{ keights_stack.ssh_access_cidr }}'
    tags:
      KubernetesCluster: '{{ keights_stack.cluster_name }}'
      k8s:version: '{{ k8s_version }}'
      keights:version: '{{ keights_version }}'
  register: common_stack
  tags:
    - common

- name: build master stack
  cloudformation:
    stack_name: '{{ keights_stack.cluster_name }}-master'
    template: '{{ role_path }}/files/master.yml'
    template_parameters:
      ClusterName: '{{ keights_stack.cluster_name }}'
      NumInstances: '{{ keights_stack.masters.subnet_ids | length }}'
      VpcId: '{{ keights_stack.vpc_id }}'
      SubnetIds: '{{ keights_stack.masters.subnet_ids | join(",") }}'
      LoadBalancerSubnetIds: '{{ keights_stack.masters.subnet_ids | join(",") }}'
      ImageId: '{{ keights_stack.masters.image_id if keights_stack.masters.image_id is defined else image_id }}'
      InstanceType: '{{ keights_stack.masters.instance_type }}'
      KeyPair: '{{ keights_stack.masters.keypair }}'
      MasterInstanceProfile: '{{ common_stack.stack_outputs.MasterInstanceProfile }}'
      LoadBalancerScheme: '{{ keights_stack.masters.load_balancer_scheme }}'
      LoadBalancerSecurityGroup: '{{ common_stack.stack_outputs.LoadBalancerSecurityGroup }}'
      MasterSecurityGroups: '{{ ([common_stack.stack_outputs.MasterSecurityGroup] + keights_stack.masters.extra_security_groups | default([])) | join(",") }}'
      LambdaRoleArn: '{{ common_stack.stack_outputs.LambdaRoleArn }}'
      KmsKeyId: '{{ keights_stack.kms_key_alias }}'
      PodCidr: '{{ keights_stack.masters.pod_cidr }}'
      ServiceCidr: '{{ keights_stack.masters.service_cidr }}'
      ClusterDns: '{{ cluster_dns }}'
      EtcdVolumeSize: '{{ keights_stack.masters.etcd_volume_size | default(10) }}'
      ImageRepository: '{{ keights_stack.masters.image_repository | default("k8s.gcr.io") }}'
      EtcdImage: '{{ keights_stack.masters.etcd_image | default("k8s.gcr.io/etcd-amd64:3.1.12") }}'
      KubernetesVersion: '{{ k8s_version }}'
      KeightsVersion: '{{ keights_version }}'
      ResourceBucket: '{{ keights_stack.resource_bucket | default(resource_bucket) }}'
    tags:
      KubernetesCluster: '{{ keights_stack.cluster_name }}'
      k8s:version: '{{ k8s_version }}'
      keights:version: '{{ keights_version }}'
  register: master_stack
  tags:
    - master

- name: build node stack
  cloudformation:
    stack_name: '{{ keights_stack.cluster_name }}-node-{{ item.name }}'
    template: '{{ role_path }}/files/node.yml'
    template_parameters:
      ClusterName: '{{ keights_stack.cluster_name }}'
      MinInstances: '{{ item.min_instances }}'
      MaxInstances: '{{ item.max_instances }}'
      VpcId: '{{ keights_stack.vpc_id }}'
      SubnetIds: '{{ item.subnet_ids | join(",") }}'
      ImageId: '{{ item.image_id if item.image_id is defined else image_id }}'
      InstanceType: '{{ item.instance_type }}'
      KeyPair: '{{ item.keypair }}'
      NodeInstanceProfile: '{{ common_stack.stack_outputs.NodeInstanceProfile }}'
      NodeSecurityGroups: '{{ ([common_stack.stack_outputs.NodeSecurityGroup] + item.extra_security_groups | default([])) | join(",") }}'
      ClusterDns: '{{ cluster_dns }}'
      NodeLabels: '{% set j = joiner(",") %}{% for k, v in item.node_labels.items() | default({}) %}{{ j() }}{{ k }}={{ v }}{% endfor %}'
      LoadBalancerDnsName: '{{ master_stack.stack_outputs.LoadBalancerDnsName }}'
    tags:
      KubernetesCluster: '{{ keights_stack.cluster_name }}'
      k8s:version: '{{ k8s_version }}'
      keights:version: '{{ keights_version }}'
  loop: '{{ keights_stack.node_groups }}'
  tags:
    - nodes

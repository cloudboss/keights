# Copyright Â© 2018 Joseph Wright <joseph@cloudboss.co>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
---
- hosts: all
  gather_facts: false
  become: true

  vars:
    base_repo: http://cdn-aws.deb.debian.org/debian/
    gpg_keys:
      - name: docker
        url: https://download.docker.com/linux/debian/gpg
      - name: google
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    volumes:
      - device: '/dev/{{ root_vol }}'
        mount: /
        fstype: ext4
        mount_opts: rw,barrier=0,noatime,errors=remount-ro
      - device: '/dev/{{ usr_vol }}'
        mount: /usr
        fstype: ext4
        mount_opts: ro,barrier=0,noatime
      - device: '/dev/{{ var_vol }}'
        mount: /var
        fstype: ext4
        mount_opts: rw,barrier=0,noatime,errors=remount-ro
      - device: '/dev/{{ var_lib_docker_vol }}'
        mount: /var/lib/docker
        fstype: ext4
        mount_opts: rw,barrier=0,noatime,errors=remount-ro
      - device: '/dev/{{ var_log_vol }}'
        mount: /var/log
        fstype: ext4
        mount_opts: rw,barrier=0,noatime,errors=remount-ro
    bootstrap_exclude:
      - nano
      - wget
      - whiptail
    bootstrap_include:
      - apt-transport-https
      - bind9-host
      - btrfs-progs
      - btrfs-tools
      - ca-certificates
      - curl
      - dbus
      - dirmngr
      - ebtables
      - ethtool
      - file
      - groff-base
      - less
      - linux-image-amd64
      - logrotate
      - net-tools
      - nfs-common
      - socat
      - sudo
      - strace
      - sysstat
      - tcpdump
      - traceroute
      - vim-tiny
      - xfsprogs

  tasks:
    - name: install packages for bootstrapping
      apt:
        name: '{{ item }}'
        update_cache: true
      with_items:
        - ca-certificates
        - debootstrap

    - name: make filesystems on volumes
      filesystem:
        fstype: '{{ item.fstype }}'
        dev: '{{ item.device }}'
        opts: '-L {{ item.mount }}'
      with_items: '{{ volumes }}'

    - name: mount volumes
      mount:
        src: '{{ item.device }}'
        path: '/mnt{{ item.mount }}'
        fstype: '{{ item.fstype }}'
        state: mounted
      with_items: '{{ volumes }}'

    - name: bootstrap operating system onto root volume
      shell: |
        debootstrap \
          --merged-usr \
          --exclude={{ bootstrap_exclude | join(",") }} \
          --include={{ bootstrap_include | join(",") }} \
          stable /mnt {{ base_repo }}
      args:
        # Pick a file, any file...
        creates: /mnt/usr/bin/vi

    - name: create directories in chroot
      file:
        path: '{{ item }}'
        state: directory
        mode: '0755'
      with_items:
        - /mnt/etc/systemd/system/docker.service.d

    - name: download software
      get_url:
        url: '{{ item.src }}'
        dest: '{{ item.dest }}'
      with_items:
        - src: https://github.com/cloudboss/keights/releases/download/{{ keights_version }}/keights_{{ keights_version }}_linux_amd64.deb
          dest: /mnt/tmp/keights.deb

    - name: download apt gpg keys into chroot
      get_url:
        url: '{{ item.url }}'
        dest: /mnt/tmp/{{ item.name }}.gpg
      with_items: '{{ gpg_keys }}'

    - name: copy staging files into chroot
      copy:
        src: 'staging/{{ item.path }}'
        dest: '/mnt/{{ item.path }}'
        mode: '{{ item.mode }}'
      with_items:
        - path: etc/systemd/timesyncd.conf
          mode: '0644'
        - path: etc/apt/sources.list.d/docker.list
          mode: '0644'
        - path: etc/apt/sources.list.d/kubernetes.list
          mode: '0644'
        - path: etc/sysctl.d/kubernetes.conf
          mode: '0644'
        - path: etc/modules-load.d/modules.conf
          mode: '0644'

    - name: expand staging templates into chroot
      template:
        src: 'staging/{{ item.path }}.j2'
        dest: '/mnt/{{ item.path }}'
        mode: '{{ item.mode }}'
      with_items:
        - path: tmp/debconf-selections
          mode: '0644'

    - name: mount memory filesystems into chroot
      mount:
        src: '/{{ item }}'
        path: '/mnt/{{ item }}'
        fstype: none
        opts: rbind
        state: mounted
      with_items:
        - dev
        - proc
        - sys

    - name: add apt gpg keys in chroot
      shell: |
        chroot /mnt sh -s<<' EOF'
        apt-key \
          --keyring /etc/apt/trusted.gpg.d/{{ item.name }}.gpg \
          add /tmp/{{ item.name }}.gpg
        EOF
      args:
        creates: /mnt/etc/apt/trusted.gpg.d/{{ item.name }}.gpg
      with_items: '{{ gpg_keys }}'

    - name: install and configure additional packages in chroot
      shell: |
        chroot /mnt sh -s<<' EOF'
        debconf-set-selections /tmp/debconf-selections && \
        apt-get update && \
        apt-get upgrade && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          cloud-init \
          grub-pc \
          locales \
          openssh-server \
          docker-ce={{ docker_version }} \
          kubernetes-cni={{ cni_version }}-00 \
          kubectl={{ k8s_version }}-00 \
          kubeadm={{ k8s_version }}-00 \
          kubelet={{ k8s_version }}-00 && \
        dpkg -i /tmp/keights.deb && \
        apt-get clean && \
        systemctl disable apt-daily.timer && \
        systemctl disable apt-daily-upgrade.timer
        EOF
      args:
        creates: /mnt/usr/bin/keights
      # Retry due to occasional network issues
      retries: 3
      register: chrooted_installation
      until: chrooted_installation is succeeded

    - name: post copy staging files into chroot
      copy:
        src: 'staging/{{ item.path }}'
        dest: '/mnt/{{ item.path }}'
        mode: '{{ item.mode }}'
      with_items:
        - path: etc/network/interfaces
          mode: '0644'
        - path: etc/cloud/cloud.cfg.d/01_cloudboss.cfg
          mode: '0644'
        - path: etc/systemd/system/docker.service.d/cloudboss.conf
          mode: '0644'
        - path: etc/udev/rules.d/70-ec2-nvme-devices.rules
          mode: '0644'
        - path: usr/sbin/ebsnvme-id
          mode: '0755'

    - name: set fstab filesystem mounts
      mount:
        src: 'LABEL={{ item.mount }}'
        path: '{{ item.mount }}'
        fstype: ext4
        opts: '{{ item.mount_opts }}'
        fstab: /mnt/etc/fstab
        state: present
      with_items: '{{ volumes }}'

    - name: clean up default fstab
      lineinfile:
        path: /mnt/etc/fstab
        regexp: UNCONFIGURED FSTAB
        state: absent

    - name: find tmp files
      command: find /mnt/tmp -mindepth 1 -maxdepth 1
      register: tmp_files
      changed_when: false

    - name: find apt lists
      command: find /mnt/var/lib/apt/lists -mindepth 1 -maxdepth 1
      register: apt_lists
      changed_when: false

    - name: find log files
      command: find /mnt/var/log -type f
      register: log_files
      changed_when: false

    - name: clean up
      file:
        path: '{{ item }}'
        state: absent
      with_flattened:
        - /mnt/initrd.img.old
        - /mnt/vmlinuz.old
        - /mnt/etc/cloud/cloud.cfg.d/00_debian.cfg
        - '{{ tmp_files.stdout_lines }}'
        - '{{ apt_lists.stdout_lines }}'
        - '{{ log_files.stdout_lines }}'

    - name: unmount chroot mounts
      mount:
        path: '{{ item }}'
        state: unmounted
      with_items:
        - mount: /mnt/dev
        - mount: /mnt/proc
        - mount: /mnt/sys
        - mount: /mnt/var/log
        - mount: /mnt/var/lib/docker
        - mount: /mnt/var
        - mount: /mnt/usr

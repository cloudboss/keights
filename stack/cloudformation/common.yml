AWSTemplateFormatVersion: '2010-09-09'

Description: Kubernetes common resources

Parameters:
  VpcId:
    Description: ID of VPC where cluster will be placed
    Type: AWS::EC2::VPC::Id
  ClusterName:
    Description: Name of Kubernetes cluster
    Type: String
  CreateIamResources:
    Description: >-
      Whether or not to create IAM roles and policies for the
      cluster. If false, then IAM roles will need to be created
      another way and passed as parameters to the remaining stacks.
    AllowedValues: ['true', 'false']
    Default: 'true'
    Type: String
  InstAttrLambdaRoleArn:
    Description: >-
      ARN of role for InstAttr lambda, when CreateIamResources is false.
    Default: ''
    Type: String
  EtcdMode:
    Description: >-
      Mode for running etcd. If 'stacked', then etcd runs on
      the masters, and if 'external' then it runs on its
      own instances.
    Type: String
    AllowedValues: ['stacked', 'external']
    Default: 'stacked'
  EtcdDomain:
    Description: >-
      Domain name given to Route53 hosted zone for etcd records.
      If empty, the EtcdHostedZoneId parameter must be provided.
    Type: String
    Default: ''
  EtcdHostedZoneId:
    Description: >-
      ID of Route53 hosted zone for etcd records. If empty,
      a private zone will be created.
    Type: String
    Default: ''
  KmsKeyId:
    Description: >-
      KMS key used to manage secrets, required when CreateIamResources is true.
    Type: String
    Default: ''
  ApiAccessCidr:
    Description: CIDR block given API access to cluster
    Default: 0.0.0.0/0
    Type: String
  SshAccessCidr:
    Description: CIDR block given ssh access to cluster
    Default: 0.0.0.0/0
    Type: String
  NodePortAccessCidr:
    Description: CIDR block given access to NodePort services
    Default: ''
    Type: String
  KeightsVersion:
    Description: Version of Keights
    Type: String
  ResourceBucket:
    Description: Bucket used to store Lambda archives
    Type: String
  LambdaSubnetIds:
    Description: >-
      List of subnet IDs in VPC where lambdas will be placed.
    Type: CommaDelimitedList
    Default: ''

Conditions:
  HasIamResources: !Equals [!Ref CreateIamResources, 'true']
  HasExternalEtcd: !Equals [!Ref EtcdMode, 'external']
  HasIamExternalEtcd: !And [{Condition: HasIamResources}, {Condition: HasExternalEtcd}]
  HasStackedEtcd: !Equals [!Ref EtcdMode, 'stacked']
  HasManagedHostedZone: !Equals [!Ref EtcdHostedZoneId, '']
  HasIamManagedHostedZone: !And [{Condition: HasIamResources}, {Condition: HasManagedHostedZone}]
  HasUnmanagedHostedZone: !Not [!Equals [!Ref EtcdHostedZoneId, '']]
  HasIamUnmanagedHostedZone: !And [{Condition: HasIamResources}, {Condition: HasUnmanagedHostedZone}]
  AllowsNodePortAccess: !Not [!Equals [!Ref NodePortAccessCidr, '']]
  HasLambdaVpcConfig: !Not [!Equals [!Join ['', !Ref LambdaSubnetIds], '']]

Resources:
  EtcdSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasExternalEtcd
    Properties:
      GroupDescription: !Sub ${ClusterName} etcd
      VpcId: !Ref VpcId

  EtcdSecurityGroupEtcdIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasExternalEtcd
    Properties:
      GroupId: !Ref EtcdSecurityGroup
      SourceSecurityGroupId: !Ref EtcdSecurityGroup
      FromPort: 2379
      ToPort: 2380
      IpProtocol: tcp

  EtcdSecurityGroupMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasExternalEtcd
    Properties:
      GroupId: !Ref EtcdSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 2379
      ToPort: 2379
      IpProtocol: tcp

  EtcdSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasExternalEtcd
    Properties:
      GroupId: !Ref EtcdSecurityGroup
      CidrIp: !Ref SshAccessCidr
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasLambdaVpcConfig
    Properties:
      GroupDescription: !Sub ${ClusterName} lambdas
      VpcId: !Ref VpcId

  LambdaSecurityGroupHttpsEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: HasLambdaVpcConfig
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      CidrIp: 0.0.0.0/0
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ClusterName} load balancer
      VpcId: !Ref VpcId

  LoadBalancerSecurityGroupApiserverPublicIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      CidrIp: !Ref ApiAccessCidr
      FromPort: 443
      IpProtocol: tcp
      ToPort: 443

  LoadBalancerSecurityGroupApiserverMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 443
      IpProtocol: tcp
      ToPort: 443

  LoadBalancerSecurityGroupApiserverNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 443
      IpProtocol: tcp
      ToPort: 443

  LoadBalancerSecurityGroupApiserverEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      DestinationSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 6443
      ToPort: 6443
      IpProtocol: tcp

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ClusterName} masters
      VpcId: !Ref VpcId

  MasterSecurityGroupAllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: '-1'

  MasterSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      CidrIp: !Ref SshAccessCidr
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22

  MasterSecurityGroupMasterEtcdIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: HasStackedEtcd
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 2379
      ToPort: 2380
      IpProtocol: tcp

  MasterSecurityGroupMasterKubeletIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 10250
      ToPort: 10250
      IpProtocol: tcp

  MasterSecurityGroupMasterDnsUdpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 53
      ToPort: 53
      IpProtocol: udp

  MasterSecurityGroupMasterDnsTcpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 53
      ToPort: 53
      IpProtocol: tcp

  MasterSecurityGroupNodeDnsUdpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 53
      ToPort: 53
      IpProtocol: udp

  MasterSecurityGroupNodeDnsTcpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 53
      ToPort: 53
      IpProtocol: tcp

  MasterSecurityGroupLoadBalancerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      FromPort: 6443
      ToPort: 6443
      IpProtocol: tcp

  MasterSecurityGroupMasterApiIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 6443
      ToPort: 6443
      IpProtocol: tcp

  MasterSecurityGroupNodeApiIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 6443
      ToPort: 6443
      IpProtocol: tcp

  MasterSecurityGroupMasterIpipIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: 4

  MasterSecurityGroupNodeIpipIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: 4

  MasterSecurityGroupMasterBgpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 179
      ToPort: 179
      IpProtocol: tcp

  MasterSecurityGroupNodeBgpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 179
      ToPort: 179
      IpProtocol: tcp

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ClusterName} nodes
      VpcId: !Ref VpcId

  NodeSecurityGroupAllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: '-1'

  NodeSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      CidrIp: !Ref SshAccessCidr
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22

  NodeSecurityGroupNodePortIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: AllowsNodePortAccess
    Properties:
      GroupId: !Ref NodeSecurityGroup
      CidrIp: !Ref NodePortAccessCidr
      FromPort: 30000
      IpProtocol: tcp
      ToPort: 32767

  NodeSecurityGroupAllNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'

  NodeSecurityGroupAllMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: '-1'

  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: HasManagedHostedZone
    Properties:
      Name: !Sub ${EtcdDomain}
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref AWS::Region

  EtcdAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamExternalEtcd
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:AttachVolume
              - ec2:DescribeVolumes
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - ssm:GetParameters
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/controller/etcd-ca.crt'
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/controller/etcd-ca.key'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'

  K8sMasterAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamResources
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:CreateRoute
              - ec2:CreateSecurityGroup
              - ec2:DeleteSecurityGroup
              - ec2:DeleteRoute
              - ec2:DeleteVolume
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInstances
              - ec2:DescribeRouteTables
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVolumes
              - ec2:DescribeVpcs
              - ec2:DetachVolume
              - ec2:ModifyInstanceAttribute
              - ec2:RevokeSecurityGroupIngress
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:AttachLoadBalancerToSubnets
              - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:CreateLoadBalancerPolicy
              - elasticloadbalancing:CreateLoadBalancerListeners
              - elasticloadbalancing:CreateTargetGroup
              - elasticloadbalancing:ConfigureHealthCheck
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:DeleteLoadBalancerListeners
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:DetachLoadBalancerFromSubnets
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:ModifyTargetGroup
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:GetAsgForInstance
              - autoscaling:SetDesiredCapacity
              - autoscaling:TerminateInstanceInAutoScalingGroup
              - autoscaling:UpdateAutoScalingGroup
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - iam:ListServerCertificates
              - iam:GetServerCertificate
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - ssm:GetParameters
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/cluster/*'
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/controller/*'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'

  K8sNodeAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamResources
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - ec2:DescribeInstances
              - ec2:DescribeVolumes
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'ssm:GetParameters'
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/cluster/*'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource:
              - '*'

  CommonLambdaAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamResources
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub 'arn:${AWS::Partition}:logs:*:*:*'
          - !If
              - HasLambdaVpcConfig
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource:
                  - '*'
              - !Ref AWS::NoValue

  AutoNamerLambdaAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamResources
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:DescribeInstances'
            Resource:
              - '*'

  AutoNamerLambdaRoute53ManagedAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamManagedHostedZone
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - route53:ChangeResourceRecordSets
            Resource:
              - !Sub 'arn:${AWS::Partition}:route53:::hostedzone/${HostedZone}'

  AutoNamerLambdaRoute53UnmanagedAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamUnmanagedHostedZone
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - route53:ChangeResourceRecordSets
            Resource:
              - !Sub 'arn:${AWS::Partition}:route53:::hostedzone/${EtcdHostedZoneId}'

  InstAttrLambdaAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamResources
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:ModifyInstanceAttribute'
            Resource:
              - '*'

  KubeCaLambdaAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamResources
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - ssm:GetParameters
              - ssm:PutParameter
            Resource:
              - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/*'
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:Encrypt
            Resource:
              - !Sub 'arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'

  SubnetToAzLambdaAccess:
    Type: AWS::IAM::ManagedPolicy
    Condition: HasIamResources
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:DescribeSubnets'
            Resource:
              - '*'

  EtcdRole:
    Type: AWS::IAM::Role
    Condition: HasIamExternalEtcd
    Properties:
      ManagedPolicyArns:
        - !Ref EtcdAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  EtcdInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: HasIamExternalEtcd
    Properties:
      Roles: [!Ref EtcdRole]

  MasterRole:
    Type: AWS::IAM::Role
    Condition: HasIamResources
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref K8sMasterAccess

  MasterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: HasIamResources
    Properties:
      Roles: [!Ref MasterRole]

  NodeRole:
    Type: AWS::IAM::Role
    Condition: HasIamResources
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref K8sNodeAccess

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: HasIamResources
    Properties:
      Roles: [!Ref NodeRole]

  AutoNamerLambdaRole:
    Type: AWS::IAM::Role
    Condition: HasIamResources
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CommonLambdaAccess
        - !Ref AutoNamerLambdaAccess
        - !If [HasIamManagedHostedZone, !Ref AutoNamerLambdaRoute53ManagedAccess, !Ref AWS::NoValue]
        - !If [HasIamUnmanagedHostedZone, !Ref AutoNamerLambdaRoute53UnmanagedAccess, !Ref AWS::NoValue]

  InstAttrLambdaRole:
    Type: AWS::IAM::Role
    Condition: HasIamResources
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CommonLambdaAccess
        - !Ref InstAttrLambdaAccess

  KubeCaLambdaRole:
    Type: AWS::IAM::Role
    Condition: HasIamResources
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CommonLambdaAccess
        - !Ref KubeCaLambdaAccess

  SubnetToAzLambdaRole:
    Type: AWS::IAM::Role
    Condition: HasIamResources
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CommonLambdaAccess
        - !Ref SubnetToAzLambdaAccess

  BasicLambdaRole:
    Type: AWS::IAM::Role
    Condition: HasIamResources
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CommonLambdaAccess

  InstanceAttributeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Sub stackbot/instattr/${KeightsVersion}/go1.x/instattr-${KeightsVersion}.zip
      Handler: instattr
      Runtime: go1.x
      Timeout: 30
      Role: !If [HasIamResources, !GetAtt InstAttrLambdaRole.Arn, !Ref InstAttrLambdaRoleArn]
      VpcConfig: !If
        - HasLambdaVpcConfig
        - SecurityGroupIds: [!Ref LambdaSecurityGroup]
          SubnetIds: !Ref LambdaSubnetIds
        - !Ref AWS::NoValue

Outputs:
  EtcdSecurityGroup:
    Description: Security group of etcd
    Value: !Ref EtcdSecurityGroup
    Condition: HasExternalEtcd
  LambdaSecurityGroup:
    Description: Security group for lambdas
    Value: !Ref LambdaSecurityGroup
    Condition: HasLambdaVpcConfig
  LoadBalancerSecurityGroup:
    Description: Security group of load balancer
    Value: !Ref LoadBalancerSecurityGroup
  MasterSecurityGroup:
    Description: Security group of masters
    Value: !Ref MasterSecurityGroup
  NodeSecurityGroup:
    Description: Security group of nodes
    Value: !Ref NodeSecurityGroup
  EtcdInstanceProfile:
    Description: Instance profile for etcd nodes
    Value: !Ref EtcdInstanceProfile
    Condition: HasIamExternalEtcd
  EtcdInstanceProfileArn:
    Description: Instance profile ARN for etcd nodes
    Value: !GetAtt EtcdInstanceProfile.Arn
    Condition: HasIamExternalEtcd
  MasterInstanceProfile:
    Description: Instance profile for master nodes
    Value: !Ref MasterInstanceProfile
    Condition: HasIamResources
  MasterInstanceProfileArn:
    Description: Instance profile ARN for master nodes
    Value: !GetAtt MasterInstanceProfile.Arn
    Condition: HasIamResources
  MasterRole:
    Description: IAM role for master nodes
    Value: !Ref MasterRole
    Condition: HasIamResources
  MasterRoleArn:
    Description: IAM role ARN for master nodes
    Value: !GetAtt MasterRole.Arn
    Condition: HasIamResources
  NodeInstanceProfile:
    Description: Instance profile for nodes
    Value: !Ref NodeInstanceProfile
    Condition: HasIamResources
  NodeInstanceProfileArn:
    Description: Instance profile ARN for nodes
    Value: !GetAtt NodeInstanceProfile.Arn
    Condition: HasIamResources
  NodeRole:
    Description: IAM role for nodes
    Value: !Ref NodeRole
    Condition: HasIamResources
  NodeRoleArn:
    Description: IAM role ARN for nodes
    Value: !GetAtt NodeRole.Arn
    Condition: HasIamResources
  AutoNamerLambdaRole:
    Description: IAM role for AutoNamer Lambda
    Value: !Ref AutoNamerLambdaRole
    Condition: HasIamResources
  AutoNamerLambdaRoleArn:
    Description: IAM role ARN for AutoNamer Lambda
    Value: !GetAtt AutoNamerLambdaRole.Arn
    Condition: HasIamResources
  InstAttrLambdaRole:
    Description: IAM role for InstAttr Lambda
    Value: !Ref InstAttrLambdaRole
    Condition: HasIamResources
  InstAttrLambdaRoleArn:
    Description: IAM role ARN for InstAttr Lambda
    Value: !GetAtt InstAttrLambdaRole.Arn
    Condition: HasIamResources
  KubeCaLambdaRole:
    Description: IAM role for KubeCa Lambda
    Value: !Ref KubeCaLambdaRole
    Condition: HasIamResources
  KubeCaLambdaRoleArn:
    Description: IAM role ARN for KubeCa Lambda
    Value: !GetAtt KubeCaLambdaRole.Arn
    Condition: HasIamResources
  SubnetToAzLambdaRole:
    Description: IAM role for SubnetToAz Lambda
    Value: !Ref SubnetToAzLambdaRole
    Condition: HasIamResources
  SubnetToAzLambdaRoleArn:
    Description: IAM role ARN for SubnetToAz Lambda
    Value: !GetAtt SubnetToAzLambdaRole.Arn
    Condition: HasIamResources
  BasicLambdaRoleArn:
    Description: IAM role ARN for Basic Lambda
    Value: !GetAtt BasicLambdaRole.Arn
    Condition: HasIamResources
  HostedZoneId:
    Description: ID of Route53 DNS hosted zone
    Value: !Ref HostedZone
    Condition: HasManagedHostedZone
  InstanceAttributeFunctionArn:
    Description: ARN of Lambda for setting EC2 instance attributes
    Value: !GetAtt InstanceAttributeFunction.Arn

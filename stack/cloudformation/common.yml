AWSTemplateFormatVersion: '2010-09-09'

Description: Kubernetes common resources

Parameters:
  VpcId:
    Description: ID of VPC where cluster will be placed
    Type: AWS::EC2::VPC::Id
  ClusterName:
    Description: Name of Kubernetes cluster
    Type: String
  EtcdDomain:
    Description: Domain name given to etcd Route53 zone.
    Type: String
  KmsKeyId:
    Description: KMS key used to manage secrets
    Type: String
  ApiAccessCidr:
    Description: CIDR block given API access to cluster
    Default: 0.0.0.0/0
    Type: String
  SshAccessCidr:
    Description: CIDR block given ssh access to cluster
    Default: 0.0.0.0/0
    Type: String

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ClusterName} load balancer
      VpcId: !Ref VpcId

  LoadBalancerSecurityGroupApiserverPublicIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      CidrIp: !Ref ApiAccessCidr
      FromPort: 6443
      IpProtocol: tcp
      ToPort: 6443

  LoadBalancerSecurityGroupApiserverMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 6443
      IpProtocol: tcp
      ToPort: 6443

  LoadBalancerSecurityGroupApiserverNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 6443
      IpProtocol: tcp
      ToPort: 6443

  LoadBalancerSecurityGroupApiserverEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      DestinationSecurityGroupId: !Ref MasterSecurityGroup
      FromPort: 6443
      ToPort: 6443
      IpProtocol: tcp

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ClusterName} masters
      VpcId: !Ref VpcId

  MasterSecurityGroupAllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: '-1'

  MasterSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      CidrIp: !Ref SshAccessCidr
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22

  MasterSecurityGroupLoadBalancerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      FromPort: 6443
      ToPort: 6443
      IpProtocol: tcp

  MasterSecurityGroupAllMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: '-1'

  MasterSecurityGroupAllNodeUdpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 0
      ToPort: 65535
      IpProtocol: udp

  MasterSecurityGroupAllNodeIpipIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: 4

  MasterSecurityGroupBelowEtcdNodeTcpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 0
      ToPort: 2378
      IpProtocol: tcp

  MasterSecurityGroupAboveEtcdNodeTcpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MasterSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      FromPort: 2381
      ToPort: 65535
      IpProtocol: tcp

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ClusterName} nodes
      VpcId: !Ref VpcId

  NodeSecurityGroupAllEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: '-1'

  NodeSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      CidrIp: !Ref SshAccessCidr
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22

  NodeSecurityGroupAllNodeIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'

  NodeSecurityGroupAllMasterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterSecurityGroup
      IpProtocol: '-1'

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub ${EtcdDomain}
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref AWS::Region

  K8sMasterAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:AttachVolume
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:CreateTags
              - ec2:CreateVolume
              - ec2:CreateRoute
              - ec2:CreateSecurityGroup
              - ec2:DeleteSecurityGroup
              - ec2:DeleteRoute
              - ec2:DeleteVolume
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInstances
              - ec2:DescribeRouteTables
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeVolumes
              - ec2:DetachVolume
              - ec2:ModifyInstanceAttribute
              - ec2:RevokeSecurityGroupIngress
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - elasticloadbalancing:AttachLoadBalancerToSubnets
              - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:CreateLoadBalancerPolicy
              - elasticloadbalancing:CreateLoadBalancerListeners
              - elasticloadbalancing:ConfigureHealthCheck
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:DeleteLoadBalancerListeners
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DetachLoadBalancerFromSubnets
              - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:RegisterInstancesWithLoadBalancer
              - elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:GetAsgForInstance
              - autoscaling:SetDesiredCapacity
              - autoscaling:TerminateInstanceInAutoScalingGroup
              - autoscaling:UpdateAutoScalingGroup
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - iam:ListServerCertificates
              - iam:GetServerCertificate
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - ssm:GetParameters
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/cluster/*'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/controller/*'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'

  K8sNodeAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - ec2:DescribeInstances
              - ec2:DescribeVolumes
              - ec2:ModifyInstanceAttribute
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'ssm:GetParameters'
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ClusterName}/cluster/*'
          - Effect: Allow
            Action:
              - kms:Decrypt
            Resource:
              - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'

  K8sLambdaAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - 'arn:aws:logs:*:*:*'
          - Effect: Allow
            Action:
              - 'ec2:Describe*'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:DeleteParameter
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
            Resource:
              - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
          - Effect: Allow
            Action:
              - route53:ChangeResourceRecordSets
            Resource:
              - !Sub 'arn:aws:route53:::hostedzone/${HostedZone}'

  MasterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref K8sMasterAccess

  MasterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref MasterRole]

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref K8sNodeAccess

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref NodeRole]

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref K8sLambdaAccess

Outputs:
  LoadBalancerSecurityGroup:
    Description: Security group of load balancer
    Value: !Ref LoadBalancerSecurityGroup
  MasterSecurityGroup:
    Description: Security group of masters
    Value: !Ref MasterSecurityGroup
  NodeSecurityGroup:
    Description: Security group of nodes
    Value: !Ref NodeSecurityGroup
  MasterInstanceProfile:
    Description: Instance profile for master nodes
    Value: !Ref MasterInstanceProfile
  MasterInstanceProfileArn:
    Description: Instance profile ARN for master nodes
    Value: !GetAtt MasterInstanceProfile.Arn
  MasterRole:
    Description: IAM role for master nodes
    Value: !Ref MasterRole
  MasterRoleArn:
    Description: IAM role ARN for master nodes
    Value: !GetAtt MasterRole.Arn
  NodeInstanceProfile:
    Description: Instance profile for nodes
    Value: !Ref NodeInstanceProfile
  NodeInstanceProfileArn:
    Description: Instance profile ARN for nodes
    Value: !GetAtt NodeInstanceProfile.Arn
  NodeRole:
    Description: IAM role for nodes
    Value: !Ref NodeRole
  NodeRoleArn:
    Description: IAM role ARN for nodes
    Value: !GetAtt NodeRole.Arn
  LambdaRole:
    Description: IAM role for custom CloudFormation Lambdas
    Value: !Ref LambdaRole
  LambdaRoleArn:
    Description: IAM role ARN for custom CloudFormation Lambdas
    Value: !GetAtt LambdaRole.Arn
  HostedZoneId:
    Description: ID of Route53 DNS hosted zone
    Value: !Ref HostedZone

AWSTemplateFormatVersion: '2010-09-09'

Description: Kubernetes node resources

Parameters:
  ClusterName:
    Description: Name of Kubernetes cluster
    Type: String
  MinInstances:
    Description: Minimum number of instances
    Type: Number
    Default: 1
  MaxInstances:
    Description: Maximum number of instances
    Type: Number
    Default: 1
  UpdateMaxBatchSize:
    Description: Maximum number of instances to update at a time
    Type: Number
    Default: 1
  VpcId:
    Description: ID of VPC where cluster will be placed
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: List of subnets IDs in VPC where cluster will be placed
    Type: List<AWS::EC2::Subnet::Id>
  ImageId:
    Description: ID of AMI used for instances
    Type: AWS::EC2::Image::Id
  InstanceTypes:
    Description: >-
      A list of instance types for the autoscaling group. If all instances
      are on-demand, this may be a list of one item.
    Type: CommaDelimitedList
  KeyPair:
    Description: SSH keypair assigned to instances
    Type: AWS::EC2::KeyPair::KeyName
  NodeInstanceProfile:
    Description: IAM Instance profile to assign to instances
    Type: String
  NodeSecurityGroups:
    Description: Security groups of nodes
    Type: CommaDelimitedList
  InstanceAttributeFunctionArn:
    Description: ARN of Lambda for setting EC2 instance attributes
    Type: String
  ClusterDns:
    Description: >-
      IP addres of cluster DNS server; should be
      the value of ServiceCidr + 10
    Default: 10.1.0.10
    Type: String
  NodeLabels:
    Description: >-
      Kubernetes node labels as a comma separated list of
      key=value pairs, for example env=prod,size=large
    Type: String
    Default: ''
  NodeTaints:
    Description: >-
      Kubernetes node taints as a comma separated list of
      key=value:effect pairs, for example k1=v1:NoSchedule,k1=v1:NoExecute
    Type: String
    Default: ''
  LoadBalancerDnsName:
    Description: DNS name of kubernetes apiserver load balancer
    Type: String
  ContainerdOptions:
    Description: >-
      Options to write to /etc/containerd/config.toml, which should follow
      https://containerd.io/docs/getting-started.
    Type: String
    Default: |
      version = 2
      [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
          sandbox_image = "k8s.gcr.io/pause:3.7"
          [plugins."io.containerd.grpc.v1.cri".containerd]
            default_runtime_name = "runc"
            [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  SystemdCgroup = true
  KubeadmJoinConfigTemplate:
    Description: Template for kubeadm join config file.
    Type: String
    Default: ''
  OnDemandPercentage:
    Description: The percentage of on-demand instances to use in the autoscaling group.
    Type: Number
    Default: 100
  SpotAllocationStrategy:
    Description: Allocation strategy for spot instances.
    Type: String
    AllowedValues:
    - lowest-price
    - capacity-optimized
    Default: lowest-price
  SpotInstancePools:
    Description: >-
      The number of pools of instance types for allocating spot instances.
    Type: Number
    Default: 2
  SpotMaxPrice:
    Description: >-
      The maximum price to pay for spot instances, defaulting to the on-demand price.
    Type: String
    Default: ''
  BasicLambdaRoleArn:
    Description: >-
      ARN of role for InstanceTypeFormatter lambda.
    Type: String
    Default: ''
  LambdaSecurityGroup:
    Description: Security group for InstanceTypeFormatter lambda
    Type: String
    Default: ''
  LambdaSubnetIds:
    Description: List of subnet IDs in VPC where InstanceTypeFormatter lambda will be placed
    Type: CommaDelimitedList
    Default: ''

Conditions:
  HasKubeadmJoinConfigTemplate: !Not [!Equals [!Ref KubeadmJoinConfigTemplate, '']]
  HasLowestPriceSpotAllocationStrategy: !Equals [!Ref SpotAllocationStrategy, lowest-price]
  HasSpotMaxPrice: !Not [!Equals [!Ref SpotMaxPrice, '']]
  HasLambdaVpcConfig: !Not [!Equals [!Join ['', !Ref LambdaSubnetIds], '']]

Resources:
  InstanceTypeFormatterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Role: !Ref BasicLambdaRoleArn
      Code:
        ZipFile: |
          import cfnresponse
          def handler(event, context):
              data = {}
              if event['RequestType'] in ('Create', 'Update'):
                  instance_types = event['ResourceProperties']['InstanceTypes']
                  data = {
                      'InstanceTypes': [
                          {'InstanceType': it} for it in instance_types
                      ]
                  }
              cfnresponse.send(
                  event, context, cfnresponse.SUCCESS,
                  data, context.log_stream_name
              )
      VpcConfig: !If
        - HasLambdaVpcConfig
        - SecurityGroupIds: [!Ref LambdaSecurityGroup]
          SubnetIds: !Ref LambdaSubnetIds
        - !Ref AWS::NoValue

  InstanceTypeFormatter:
    Type: Custom::InstanceTypeFormatter
    DependsOn: InstanceTypeFormatterFunction
    Properties:
      ServiceToken: !GetAtt InstanceTypeFormatterFunction.Arn
      InstanceTypes: !Ref InstanceTypes

  InstanceAttributeEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Targets:
        - Id: !Sub ${AWS::StackName}-instattr
          Arn: !Ref InstanceAttributeFunctionArn
      EventPattern:
        source: [aws.autoscaling]
        detail-type: [EC2 Instance Launch Successful]
        detail:
          AutoScalingGroupName: [!Ref 'AWS::StackName']

  InstanceAttributeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InstanceAttributeFunctionArn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InstanceAttributeEventsRule.Arn

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: [InstanceAttributeInvokePermission]
    CreationPolicy:
      ResourceSignal:
        Count: !Ref MinInstances
        Timeout: PT15M
    Properties:
      AutoScalingGroupName: !Ref AWS::StackName
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentage
          SpotAllocationStrategy: !Ref SpotAllocationStrategy
          SpotInstancePools: !If [HasLowestPriceSpotAllocationStrategy, !Ref SpotInstancePools, !Ref 'AWS::NoValue']
          SpotMaxPrice: !If [HasSpotMaxPrice, !Ref SpotMaxPrice, !Ref 'AWS::NoValue']
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides: !GetAtt InstanceTypeFormatter.InstanceTypes
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref UpdateMaxBatchSize
        PauseTime: PT15M
        WaitOnResourceSignals: true
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref NodeInstanceProfile
        ImageId: !Ref ImageId
        KeyName: !Ref KeyPair
        SecurityGroupIds: !Ref NodeSecurityGroups
        UserData:
          Fn::Base64:
            !Sub
            - |
              #cloud-config
              write_files:
              - path: /etc/kubernetes/apiserver
                owner: root:root
                permissions: '0644'
                content: ${LoadBalancerDnsName}

              - path: /etc/keights/kubeadm-join-config.yaml.template
                owner: root:root
                permissions: '0644'
                content: ${KubeadmJoinConfigTemplateContents}

              - path: /etc/containerd/config.toml
                owner: root:root
                permissions: '0644'
                content: ${ContainerdOptions}

              - path: /etc/systemd/system/keights-whisper-node.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_CLUSTER_NAME=${ClusterName}

              - path: /etc/systemd/system/keights-templatize-kubeadm-join-config.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_APISERVER=${LoadBalancerDnsName}
                  Environment=KEIGHTS_APISERVER_PORT=443
                  Environment=KEIGHTS_NODE_LABELS=${NodeLabels},
                  Environment=KEIGHTS_NODE_TAINTS=${NodeTaints},
                  ${KubeadmJoinConfigTemplateEnv}

              - path: /etc/systemd/system/keights-node-signal.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_STACK_NAME=${AWS::StackName}
                  Environment=KEIGHTS_RESOURCE=AutoScalingGroup

              runcmd:
              - systemctl daemon-reload
              - systemctl enable kubelet.service
              - systemctl start --no-block keights-kubeadm-join.service
              - systemctl start --no-block keights-node-signal.service

            - KubeadmJoinConfigTemplateEnv: !If
                - HasKubeadmJoinConfigTemplate
                - Environment=KEIGHTS_KUBEADM_JOIN_CONFIG_TEMPLATE=/etc/keights/kubeadm-join-config.yaml.template
                - ''
              KubeadmJoinConfigTemplateContents: !If
                - HasKubeadmJoinConfigTemplate
                - !Ref KubeadmJoinConfigTemplate
                - '""'

Outputs:
  AutoScalingGroup:
    Description: Name of autoscaling group
    Value: !Ref AutoScalingGroup

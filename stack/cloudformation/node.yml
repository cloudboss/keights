AWSTemplateFormatVersion: '2010-09-09'

Description: Kubernetes node resources

Parameters:
  ClusterName:
    Description: Name of Kubernetes cluster
    Type: String
  MinInstances:
    Description: Minimum number of instances
    Type: Number
    Default: 1
  MaxInstances:
    Description: Maximum number of instances
    Type: Number
    Default: 1
  UpdateMaxBatchSize:
    Description: Maximum number of instances to update at a time
    Type: Number
    Default: 1
  VpcId:
    Description: ID of VPC where cluster will be placed
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: List of subnets IDs in VPC where cluster will be placed
    Type: List<AWS::EC2::Subnet::Id>
  ImageId:
    Description: ID of AMI used for instances
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Type of EC2 instance
    Type: String
  KeyPair:
    Description: SSH keypair assigned to instances
    Type: AWS::EC2::KeyPair::KeyName
  NodeInstanceProfile:
    Description: IAM Instance profile to assign to instances
    Type: String
  NodeSecurityGroups:
    Description: Security groups of nodes
    Type: CommaDelimitedList
  InstanceAttributeFunctionArn:
    Description: ARN of Lambda for setting EC2 instance attributes
    Type: String
  ClusterDns:
    Description: >-
      IP addres of cluster DNS server; should be
      the value of ServiceCidr + 10
    Default: 10.1.0.10
    Type: String
  NodeLabels:
    Description: >-
      Kubernetes node labels as a comma separated list of
      key=value pairs, for example env=prod,size=large
    Type: String
    Default: ''
  LoadBalancerDnsName:
    Description: DNS name of kubernetes apiserver load balancer
    Type: String
  ImageRepository:
    Description: Repository for core Kubernetes Docker images
    Type: String
    Default: k8s.gcr.io
  DockerOptions:
    Description: >-
      Options to write to /etc/docker/daemon.json, which should follow
      https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file.
    Type: String
    Default: |
      {
        "ip-masq": false,
        "iptables": false,
        "log-driver": "journald",
        "storage-driver": "overlay2"
      }

Resources:
  InstanceAttributeEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Targets:
        - Id: !Sub ${AWS::StackName}-instattr
          Arn: !Ref InstanceAttributeFunctionArn
      EventPattern:
        source: [aws.autoscaling]
        detail-type: [EC2 Instance Launch Successful]
        detail:
          AutoScalingGroupName: [!Ref 'AWS::StackName']

  InstanceAttributeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InstanceAttributeFunctionArn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InstanceAttributeEventsRule.Arn

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: [InstanceAttributeInvokePermission]
    CreationPolicy:
      ResourceSignal:
        Count: !Ref MinInstances
        Timeout: PT15M
    Properties:
      AutoScalingGroupName: !Ref AWS::StackName
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      VPCZoneIdentifier: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref UpdateMaxBatchSize
        PauseTime: PT15M
        WaitOnResourceSignals: true
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      PlacementTenancy: default
      SecurityGroups: !Ref NodeSecurityGroups
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config
            write_files:
              - path: /etc/docker/daemon.json
                owner: root:root
                permissions: '0644'
                content: ${DockerOptions}

              - path: /etc/systemd/system/keights-whisper-node.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_CLUSTER_NAME=${ClusterName}

              - path: /etc/systemd/system/keights-templatize-kubeadm-join-config.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_APISERVER=${LoadBalancerDnsName}
                  Environment=KEIGHTS_APISERVER_PORT=443
                  Environment=KEIGHTS_IMAGE_REPOSITORY=${ImageRepository}
                  Environment=KEIGHTS_NODE_LABELS=${NodeLabels},

              - path: /etc/systemd/system/keights-signal.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_STACK_NAME=${AWS::StackName}
                  Environment=KEIGHTS_MASTER=false

            runcmd:
              - systemctl daemon-reload
              - systemctl enable kubelet.service
              - systemctl start --no-block keights-kubeadm-join.service
              - systemctl start --no-block keights-signal.service

Outputs:
  AutoScalingGroup:
    Description: Name of autoscaling group
    Value: !Ref AutoScalingGroup

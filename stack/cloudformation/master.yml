AWSTemplateFormatVersion: '2010-09-09'

Description: Kubernetes master resources

Parameters:
  ClusterName:
    Description: Name of Kubernetes cluster
    Type: String
  NumInstances:
    Description: Number of master instances
    Type: Number
    Default: 1
    AllowedValues: [1, 3]
    ConstraintDescription: You must choose an odd number of instances
  VpcId:
    Description: ID of VPC where cluster will be placed
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Description: >-
      List of subnets IDs in VPC where cluster will be placed.
      The number of subnets must match the NumInstances parameter.
    Type: List<AWS::EC2::Subnet::Id>
  LoadBalancerSubnetIds:
    Description: >-
      List of subnets IDs in VPC for API load balancer.
      The number of subnets must match the NumInstances parameter.
    Type: List<AWS::EC2::Subnet::Id>
  ImageId:
    Description: ID of AMI used for instances
    Type: AWS::EC2::Image::Id
    Default: ami-00ef6c2eb0dc29da1
  InstanceType:
    Description: Type of EC2 instance
    Type: String
  KeyPair:
    Description: SSH keypair assigned to instances
    Type: AWS::EC2::KeyPair::KeyName
  MasterInstanceProfile:
    Description: Name of IAM Instance profile to assign to instances
    Type: String
  LoadBalancerScheme:
    Description: Scheme of API load balancer
    Type: String
    Default: internal
    AllowedValues:
      - internal
      - internet-facing
  LoadBalancerSecurityGroup:
    Description: Security group of load balancer
    Type: String
  MasterSecurityGroups:
    Description: Security groups of masters
    Type: CommaDelimitedList
  LambdaRoleArn:
    Description: Role ARN to assign to helper Lamba functions
    Type: String
  KmsKeyId:
    Description: KMS key used to manage secrets
    Type: String
    Default: ''
  PodCidr:
    Description: CIDR block of addresses for pods
    Default: 10.0.0.0/16
    Type: String
  ServiceCidr:
    Description: CIDR block of addresses for services
    Default: 10.1.0.0/16
    Type: String
  ClusterDns:
    Description: >-
      IP addres of cluster DNS server; should be
      the value of ServiceCidr + 10
    Default: 10.1.0.10
    Type: String
  EtcdVolumeSize:
    Description: Size of etcd volume in GB
    Default: 10
    Type: Number
  ImageRepository:
    Description: Repository for core Kubernetes Docker images
    Type: String
    Default: k8s.gcr.io
  EtcdImage:
    Description: Docker image containing etcd
    Type: String
    Default: k8s.gcr.io/etcd-amd64:3.1.12
  KubernetesVersion:
    Description: Version of Kubernetes
    Type: String
  KeightsVersion:
    Description: Version of Keights
    Type: String
  ResourceBucket:
    Description: Bucket used to store Lambda archives
    Type: String
    Default: cloudboss-public

Conditions:
  HasThreeMasters: !Equals [!Ref NumInstances, 3]

Resources:
  SubnetToAzFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Sub stackbot/subnet_to_az/${KeightsVersion}/go1.x/subnet_to_az-${KeightsVersion}.zip
      Handler: subnet_to_az
      Runtime: go1.x
      Timeout: 30
      Role: !Ref LambdaRoleArn

  KubeCaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ResourceBucket
        S3Key: !Sub stackbot/kube_ca/${KeightsVersion}/go1.x/kube_ca-${KeightsVersion}.zip
      Handler: kube_ca
      Runtime: go1.x
      MemorySize: 512
      Timeout: 30
      Role: !Ref LambdaRoleArn

  SubnetToAz:
    Type: Custom::SubnetToAz
    DependsOn: SubnetToAzFunction
    Properties:
      ServiceToken: !GetAtt [SubnetToAzFunction, Arn]
      SubnetIds: !Ref SubnetIds

  KubeCa:
    Type: Custom::KubeCa
    DependsOn: KubeCaFunction
    Properties:
      ServiceToken: !GetAtt [KubeCaFunction, Arn]
      ClusterName: !Ref ClusterName
      ServiceCidr: !Ref ServiceCidr
      LoadBalancerName: !GetAtt [LoadBalancer, DNSName]
      NumInstances: !Ref NumInstances
      KmsKeyId: !Ref KmsKeyId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: 3
        Interval: 30
        Target: TCP:6443
        Timeout: 10
        UnhealthyThreshold: 3
      LoadBalancerName: !Ref ClusterName
      Listeners:
        - InstancePort: 6443
          InstanceProtocol: TCP
          Protocol: TCP
          LoadBalancerPort: 443
        - InstancePort: 6443
          InstanceProtocol: TCP
          Protocol: TCP
          LoadBalancerPort: 6443
      Scheme: !Ref LoadBalancerScheme
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref LoadBalancerSubnetIds

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: KubeCa
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NumInstances
        Timeout: PT15M
    Properties:
      DesiredCapacity: !Ref NumInstances
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref NumInstances
      MinSize: !Ref NumInstances
      VPCZoneIdentifier: !Ref SubnetIds
      LoadBalancerNames: [!Ref LoadBalancer]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions

  Volume1:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select [0, !Split [",", !GetAtt SubnetToAz.AvailabilityZones]]
      Size: !Ref EtcdVolumeSize
      VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Ref ClusterName
        - Key: etcd:instance
          Value: 1

  Volume2:
    Type: AWS::EC2::Volume
    Condition: HasThreeMasters
    Properties:
      AvailabilityZone: !Select [1, !Split [",", !GetAtt SubnetToAz.AvailabilityZones]]
      Size: !Ref EtcdVolumeSize
      VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Ref ClusterName
        - Key: etcd:instance
          Value: 2

  Volume3:
    Type: AWS::EC2::Volume
    Condition: HasThreeMasters
    Properties:
      AvailabilityZone: !Select [2, !Split [",", !GetAtt SubnetToAz.AvailabilityZones]]
      Size: !Ref EtcdVolumeSize
      VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Ref ClusterName
        - Key: etcd:instance
          Value: 3

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref MasterInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      PlacementTenancy: default
      SecurityGroups: !Ref MasterSecurityGroups
      UserData:
        Fn::Base64:
          !Sub |
            #cloud-config
            write_files:
              - path: /etc/systemd/system/keights-collector.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_CLUSTER_NAME=${ClusterName}
                  Environment=KEIGHTS_VOLUME_TAG=etcd:instance

              - path: /etc/systemd/system/keights-share.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_PREFIX=${ClusterName}

              - path: /etc/systemd/system/keights-templatize-etcd.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_ETCD_CLUSTER_TOKEN=etcd-${ClusterName}
                  Environment=KEIGHTS_ETCD_IMAGE=${EtcdImage}
                  Environment=KEIGHTS_PREFIX=${ClusterName}

              - path: /etc/systemd/system/keights-volumize.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_CLUSTER_NAME=${ClusterName}
                  Environment=KEIGHTS_VOLUME_TAG=etcd:instance
                  Environment=KEIGHTS_VOLUME_DEVICE=xvdg

              - path: /etc/systemd/system/var-lib-etcd.mount.d/mount.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Mount]
                  What=/dev/xvdg

              - path: /etc/systemd/system/keights-whisper-controller.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_CLUSTER_NAME=${ClusterName}

              - path: /etc/systemd/system/keights-templatize-kubeadm-config.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_DOMAIN=k8s.local
                  Environment=KEIGHTS_PREFIX=${ClusterName}
                  Environment=KEIGHTS_APISERVER=${LoadBalancer.DNSName}
                  Environment=KEIGHTS_POD_SUBNET=${PodCidr}
                  Environment=KEIGHTS_SERVICE_SUBNET=${ServiceCidr}
                  Environment=KEIGHTS_IMAGE_REPOSITORY=${ImageRepository}
                  Environment=KEIGHTS_KUBERNETES_VERSION=v${KubernetesVersion}

              - path: /etc/systemd/system/keights-signal.service.d/environment.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=AWS_REGION=${AWS::Region}
                  Environment=KEIGHTS_STACK_NAME=${AWS::StackName}
                  Environment=KEIGHTS_MASTER=true

              - path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
                owner: root:root
                permissions: '0644'
                content: |
                  [Service]
                  Environment=KEIGHTS_CLUSTER_DOMAIN=k8s.local
                  ExecStart=
                  ExecStart=/usr/bin/kubelet \
                              --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
                              --kubeconfig=/etc/kubernetes/kubelet.conf \
                              --pod-manifest-path=/etc/kubernetes/manifests \
                              --allow-privileged=true \
                              --network-plugin=cni \
                              --cni-conf-dir=/etc/cni/net.d \
                              --cni-bin-dir=/opt/cni/bin \
                              --cluster-dns=${ClusterDns} \
                              --cluster-domain=${!KEIGHTS_CLUSTER_DOMAIN} \
                              --authorization-mode=Webhook \
                              --client-ca-file=/etc/kubernetes/pki/ca.crt \
                              --cadvisor-port=0 \
                              --rotate-certificates=true \
                              --cert-dir=/var/lib/kubelet/pki \
                              --cloud-provider=aws

            runcmd:
              - systemctl daemon-reload
              - systemctl enable var-lib-etcd.mount
              - systemctl enable kubelet.service
              - systemctl enable keights-collector.timer
              - systemctl enable keights-share.path
              - systemctl enable keights-templatize-etcd.service
              - systemctl enable keights-templatize-kubeadm-config.service
              - systemctl enable keights-whisper-controller.service
              - systemctl start --no-block kubelet.service
              - systemctl start --no-block keights-add-addon.service
              - systemctl start --no-block keights-collector.timer
              - systemctl start --no-block keights-share.path
              - systemctl start --no-block keights-kubeadm-init.service
              - systemctl start --no-block keights-signal.service

Outputs:
  LoadBalancerDnsName:
    Description: DNS name of load balancer
    Value: !GetAtt [LoadBalancer, DNSName]
  AutoScalingGroup:
    Description: Name of autoscaling group
    Value: !Ref AutoScalingGroup

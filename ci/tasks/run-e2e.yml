---
platform: linux

image_resource:
  type: docker-image
  source:
    repository: alpine
    tag: '3.8'

inputs:
- name: artifacts-in
- name: repo

outputs:
- name: artifacts-out

params:
  SONOBUOY_URL: https://github.com/vmware-tanzu/sonobuoy/releases/download/v0.17.2/sonobuoy_0.17.2_linux_amd64.tar.gz
  KUBECTL_URL: https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/linux/amd64/kubectl
  KUBECONFIG: artifacts-in/kubeconfig
  CNI_PLUGIN_DAEMONSET: kube-router

run:
  path: /bin/sh
  args:
  - -e
  - -c
  - |
    if [ -f artifacts-in/noop ]; then
        echo 'Nothing to do, skipping'
        exit 0
    fi

    wget -O /tmp/sonobuoy.tar.gz ${SONOBUOY_URL}
    mkdir -p /opt/bin
    gunzip -c /tmp/sonobuoy.tar.gz | tar -xf - -C /opt/bin sonobuoy

    wget -O /opt/bin/kubectl ${KUBECTL_URL}
    chmod ugo+x /opt/bin/kubectl

    export PATH=/opt/bin:${PATH}

    echo "Waiting for ${CNI_PLUGIN_DAEMONSET} daemonset to be rolled out..."
    kubectl -n kube-system rollout status ds --timeout=600s ${CNI_PLUGIN_DAEMONSET}

    echo "Waiting for network..."
    kubectl apply -f repo/ci/assets/verify-network.yml
    kubectl wait --for=condition=complete --timeout=600s job/verify-network
    kubectl delete job verify-network

    echo "Running sonobuoy `sonobuoy version --short`"

    sonobuoy run --wait=180 --mode certified-conformance

    echo -n 'Checking e2e results...'
    results=`sonobuoy retrieve artifacts-out`
    failed=`sonobuoy e2e ${results} | awk '/failed tests:/{print $3}'`
    if [ "${failed}" != 0 ]; then
        echo ' error:'
        sonobuoy e2e ${results}
        exit 1
    fi
    echo ' all tests passed'

apiVersion: kubeadm.k8s.io/v1beta3
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: {{ .Token }}
  ttl: 0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: {{ .MyIP }}
  bindPort: 6443
nodeRegistration:
  criSocket: /run/containerd/containerd.sock
  kubeletExtraArgs:
    cloud-provider: aws
  imagePullPolicy: IfNotPresent
  name: {{ .NodeName }}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
---
apiServer:
  certSANs:
  - {{ .APIServer }}
  extraArgs:
    authorization-mode: Node,RBAC
    cloud-provider: aws
    external-hostname: {{ .APIServer }}
    service-account-jwks-uri: https://kubernetes.default.svc.{{ .ClusterDomain }}/openid/v1/jwks
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta3
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controlPlaneEndpoint: {{ .APIServer }}:{{ .APIPort }}
controllerManager:
  extraArgs:
    cloud-provider: aws
    configure-cloud-routes: "false"
    flex-volume-plugin-dir: /var/lib/kubelet/plugins/volume/exec
    allocate-node-cidrs: "{{ .AllocateNodeCIDRs }}"
  extraVolumes:
  - name: bin-sh
    hostPath: /bin/sh
    mountPath: /bin/sh
    readOnly: true
    pathType: File
  - name: libc-so-6
    hostPath: /lib/x86_64-linux-gnu/libc.so.6
    mountPath: /lib/x86_64-linux-gnu/libc.so.6
    readOnly: true
    pathType: File
  - name: ld-linux-so-2
    hostPath: /lib64/ld-linux-x86-64.so.2
    mountPath: /lib64/ld-linux-x86-64.so.2
    readOnly: true
    pathType: File
dns: {}
{{- if eq .EtcdMode "stacked" }}
etcd:
  local:
    dataDir: /var/lib/etcd
    extraArgs:
      advertise-client-urls: https://{{ .MyIP }}:2379
      cert-file: /etc/kubernetes/pki/etcd/server.crt
      client-cert-auth: "true"
      data-dir: /var/lib/etcd
      initial-advertise-peer-urls: https://{{ .MyIP }}:2380
      initial-cluster: {{ range $i, $az := .AZs }}{{ if $i }},{{end}}{{ $.Prefix }}-{{ $az }}=https://{{ $.Prefix }}-{{ $az }}.{{ $.EtcdDomain }}:2380{{ end }}
      initial-cluster-token: {{ .EtcdDomain }}
      key-file: /etc/kubernetes/pki/etcd/server.key
      listen-client-urls: https://127.0.0.1:2379,https://{{ .MyIP }}:2379
      listen-peer-urls: https://{{ .MyIP }}:2380
      name: {{ .Prefix }}-{{ .MyAZ }}
      peer-cert-file: /etc/kubernetes/pki/etcd/peer.crt
      peer-client-cert-auth: "true"
      peer-key-file: /etc/kubernetes/pki/etcd/peer.key
      peer-trusted-ca-file: /etc/kubernetes/pki/etcd/ca.crt
      trusted-ca-file: /etc/kubernetes/pki/etcd/ca.crt
    peerCertSANs:
    - {{ .MyIP }}
    - {{ .Prefix }}-{{ .MyAZ }}.{{ .EtcdDomain }}
    serverCertSANs:
    - {{ .MyIP }}
    - {{ .Prefix }}-{{ .MyAZ }}.{{ .EtcdDomain }}
{{- end }}
{{- if eq .EtcdMode "external" }}
etcd:
  external:
    endpoints:
    {{- range $i, $az := .AZs }}
    - https://{{ $.Prefix }}-{{ $az }}.{{ $.EtcdDomain }}:2379
    {{- end }}
    caFile: /etc/kubernetes/pki/etcd/ca.crt
    certFile: /etc/kubernetes/pki/apiserver-etcd-client.crt
    keyFile: /etc/kubernetes/pki/apiserver-etcd-client.key
{{- end }}
imageRepository: {{ .ImageRepository }}
kind: ClusterConfiguration
kubernetesVersion: {{ .KubernetesVersion }}
networking:
  dnsDomain: {{ .ClusterDomain }}
  podSubnet: {{ .PodSubnet }}
  serviceSubnet: {{ .ServiceSubnet }}
scheduler: {}
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
clusterCIDR: {{ .PodSubnet }}
kind: KubeProxyConfiguration
mode: ipvs
---
apiVersion: kubelet.config.k8s.io/v1beta1
authentication:
  anonymous:
    enabled: false
  webhook:
    cacheTTL: 2m0s
    enabled: true
  x509:
    clientCAFile: /etc/kubernetes/pki/ca.crt
clusterDNS:
- {{ .ClusterDNS }}
clusterDomain: {{ .ClusterDomain }}
enforceNodeAllocatable:
- pods
kind: KubeletConfiguration
rotateCertificates: true
staticPodPath: /etc/kubernetes/manifests
volumePluginDir: /var/lib/kubelet/plugins/volume/exec

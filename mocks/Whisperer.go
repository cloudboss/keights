// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Whisperer is an autogenerated mock type for the Whisperer type
type Whisperer struct {
	mock.Mock
}

// DeleteParameter provides a mock function with given fields: path
func (_m *Whisperer) DeleteParameter(path *string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(*string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceStoreParameter provides a mock function with given fields: path, kmsKeyID, content
func (_m *Whisperer) ForceStoreParameter(path *string, kmsKeyID *string, content *string) error {
	ret := _m.Called(path, kmsKeyID, content)

	var r0 error
	if rf, ok := ret.Get(0).(func(*string, *string, *string) error); ok {
		r0 = rf(path, kmsKeyID, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetParameter provides a mock function with given fields: path
func (_m *Whisperer) GetParameter(path *string) (*string, error) {
	ret := _m.Called(path)

	var r0 *string
	if rf, ok := ret.Get(0).(func(*string) *string); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasParameters provides a mock function with given fields: paths
func (_m *Whisperer) HasParameters(paths ...*string) (bool, error) {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...*string) bool); ok {
		r0 = rf(paths...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...*string) error); ok {
		r1 = rf(paths...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreParameter provides a mock function with given fields: path, kmsKeyID, content
func (_m *Whisperer) StoreParameter(path *string, kmsKeyID *string, content *string) error {
	ret := _m.Called(path, kmsKeyID, content)

	var r0 error
	if rf, ok := ret.Get(0).(func(*string, *string, *string) error); ok {
		r0 = rf(path, kmsKeyID, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
